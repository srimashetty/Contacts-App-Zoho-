{"ast":null,"code":"import _slicedToArray from \"/home/srima/github/contact-keeper-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/srima/github/contact-keeper-mern/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport { GET_CONTACTS, ADD_CONTACT // DELETE_CONTACT,\n, SET_CURRENT, CLEAR_CURRENT // UPDATE_CONTACT,\n, CONTACT_ERROR, CLEAR_CONTACTS } from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const _useReducer = useReducer(contactReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Get Contacts\n\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get(\"/api/contacts\");\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/contacts\", contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // // Delete Contact\n  // const deleteContact = async id => {\n  //   try {\n  //     await axios.delete(`/api/contacts/${id}`);\n  //     dispatch({ type: DELETE_CONTACT, payload: id });\n  //   } catch (err) {\n  //     dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n  //   }\n  // };\n  // Clear Current Contacts\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // // Update Contact\n  // const updateContact = async contact => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     }\n  //   };\n  //   try {\n  //     const res = await axios.put(\n  //       `/api/contacts/${contact._id}`,\n  //       contact,\n  //       config\n  //     );\n  //     dispatch({ type: UPDATE_CONTACT, payload: res.data });\n  //   } catch (err) {\n  //     dispatch({ type: CONTACT_ERROR, payload: err.response.data.msg });\n  //   }\n  // };\n\n\n  return React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      getContacts,\n      addContact,\n      // updateContact,\n      // deleteContact,\n      clearContacts,\n      setCurrent,\n      clearCurrent\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/home/srima/github/contact-keeper-mern/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","SET_CURRENT","CLEAR_CURRENT","CONTACT_ERROR","CLEAR_CONTACTS","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","headers","post","clearContacts","setCurrent","clearCurrent","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  // DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  // UPDATE_CONTACT,\n  CONTACT_ERROR,\n  CLEAR_CONTACTS\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // Get Contacts\n  const getContacts = async () => {\n    try {\n      const res = await axios.get(\"/api/contacts\");\n      dispatch({ type: GET_CONTACTS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // Add Contact\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/contacts\", contact, config);\n      dispatch({ type: ADD_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // // Delete Contact\n  // const deleteContact = async id => {\n  //   try {\n  //     await axios.delete(`/api/contacts/${id}`);\n  //     dispatch({ type: DELETE_CONTACT, payload: id });\n  //   } catch (err) {\n  //     dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n  //   }\n  // };\n\n  // Clear Current Contacts\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS });\n  };\n\n  // Set Current Contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // // Update Contact\n  // const updateContact = async contact => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     }\n  //   };\n\n  //   try {\n  //     const res = await axios.put(\n  //       `/api/contacts/${contact._id}`,\n  //       contact,\n  //       config\n  //     );\n  //     dispatch({ type: UPDATE_CONTACT, payload: res.data });\n  //   } catch (err) {\n  //     dispatch({ type: CONTACT_ERROR, payload: err.response.data.msg });\n  //   }\n  // };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        getContacts,\n        addContact,\n        // updateContact,\n        // deleteContact,\n        clearContacts,\n        setCurrent,\n        clearCurrent,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}
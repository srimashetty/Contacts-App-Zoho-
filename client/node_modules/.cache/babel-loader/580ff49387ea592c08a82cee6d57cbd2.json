{"ast":null,"code":"import _objectSpread from \"/home/srima/github/contact-keeper-mern/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CONTACT_ERROR } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return _objectSpread({}, state, {\n        contacts: action.payload\n      });\n\n    case ADD_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: [action.payload, ...state.contacts]\n      });\n\n    case UPDATE_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact)\n      });\n\n    case DELETE_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      });\n\n    case CLEAR_CONTACTS:\n      return _objectSpread({}, state, {\n        contacts: null,\n        error: null,\n        filtered: null,\n        current: null\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case FILTER_CONTACTS:\n      return _objectSpread({}, state, {\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread({}, state, {\n        filtered: null\n      });\n\n    case CONTACT_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/srima/github/contact-keeper-mern/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CONTACT_ERROR","state","action","type","contacts","payload","map","contact","_id","filter","loading","error","filtered","current","regex","RegExp","name","match","email"],"mappings":";AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,aARF,EASEC,cATF,EAUEC,aAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,YAAL;AACE,+BACKU,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFnB;;AAIF,SAAKb,WAAL;AACE,+BACKS,KADL;AAEEG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B;AAFZ;;AAIF,SAAKL,cAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,GAAR,KAAgBN,MAAM,CAACG,OAAP,CAAeG,GAA/B,GAAqCN,MAAM,CAACG,OAA5C,GAAsDE,OAD9C;AAFZ;;AAMF,SAAKd,cAAL;AACE,+BACKQ,KADL;AAEEG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,MAAf,CACRF,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBN,MAAM,CAACG,OAD1B,CAFZ;AAKEK,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKf,cAAL;AACE,+BACKM,KADL;AAEEG,QAAAA,QAAQ,EAAE,IAFZ;AAGEO,QAAAA,KAAK,EAAE,IAHT;AAIEC,QAAAA,QAAQ,EAAE,IAJZ;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKhB,WAAL;AACE,+BACKI,KADL;AAEEY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAFlB;;AAIF,SAAKP,aAAL;AACE,+BACKG,KADL;AAEEY,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKnB,eAAL;AACE,+BACKO,KADL;AAEEW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,QAAN,CAAeK,MAAf,CAAsBF,OAAO,IAAI;AACzC,gBAAMO,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFZ;;AAOF,SAAKlB,YAAL;AACE,+BACKK,KADL;AAEEW,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKZ,aAAL;AACE,+BACKC,KADL;AAEEU,QAAAA,KAAK,EAAET,MAAM,CAACG;AAFhB;;AAIF;AACE,aAAOJ,KAAP;AA/DJ;AAiED,CAlED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  CONTACT_ERROR\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact._id === action.payload._id ? action.payload : contact\n        )\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact._id !== action.payload\n        ),\n        loading: false\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        error: null,\n        filtered: null,\n        current: null\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}